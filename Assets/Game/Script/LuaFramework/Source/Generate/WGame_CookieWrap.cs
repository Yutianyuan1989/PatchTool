//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class WGame_CookieWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(WGame.Cookie), typeof(System.Object));
		L.RegFunction("Define", Define);
		L.RegFunction("Set", Set);
		L.RegFunction("Get", Get);
		L.RegFunction("AddSetListener", AddSetListener);
		L.RegFunction("RemoveSetListner", RemoveSetListner);
		L.RegFunction("New", _CreateWGame_Cookie);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegFunction("CookieGetter", WGame_Cookie_CookieGetter);
		L.RegFunction("CookieSetter", WGame_Cookie_CookieSetter);
		L.RegFunction("IfNullGetter", WGame_Cookie_IfNullGetter);
		L.RegFunction("CookieSetListener", WGame_Cookie_CookieSetListener);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateWGame_Cookie(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				WGame.Cookie obj = new WGame.Cookie();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: WGame.Cookie.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Define(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			WGame.Cookie.CookieGetter arg1 = (WGame.Cookie.CookieGetter)ToLua.CheckDelegate<WGame.Cookie.CookieGetter>(L, 2);
			WGame.Cookie.CookieSetter arg2 = (WGame.Cookie.CookieSetter)ToLua.CheckDelegate<WGame.Cookie.CookieSetter>(L, 3);
			WGame.Cookie.Define(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Set(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			object arg1 = ToLua.ToVarObject(L, 2);
			WGame.Cookie.Set(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Get(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				object o = WGame.Cookie.Get(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				WGame.Cookie.IfNullGetter arg1 = (WGame.Cookie.IfNullGetter)ToLua.CheckDelegate<WGame.Cookie.IfNullGetter>(L, 2);
				object o = WGame.Cookie.Get(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: WGame.Cookie.Get");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddSetListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			WGame.Cookie.CookieSetListener arg1 = (WGame.Cookie.CookieSetListener)ToLua.CheckDelegate<WGame.Cookie.CookieSetListener>(L, 2);
			WGame.Cookie.AddSetListener(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveSetListner(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			WGame.Cookie.CookieSetListener arg1 = (WGame.Cookie.CookieSetListener)ToLua.CheckDelegate<WGame.Cookie.CookieSetListener>(L, 2);
			WGame.Cookie.RemoveSetListner(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WGame_Cookie_CookieGetter(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<WGame.Cookie.CookieGetter>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<WGame.Cookie.CookieGetter>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WGame_Cookie_CookieSetter(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<WGame.Cookie.CookieSetter>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<WGame.Cookie.CookieSetter>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WGame_Cookie_IfNullGetter(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<WGame.Cookie.IfNullGetter>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<WGame.Cookie.IfNullGetter>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WGame_Cookie_CookieSetListener(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<WGame.Cookie.CookieSetListener>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<WGame.Cookie.CookieSetListener>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

